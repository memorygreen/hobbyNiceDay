<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ReservationDAO">


    <!-- 예약 등록 -->
    <insert id="insertReservation" parameterType="ReservationVO">
        INSERT INTO TB_RESERVATION (
							            USER_ID
							            , CLASS_DETAIL_ID
							            , RESERVATION_DT
							            , RESERVATION_CNT
							            , RESERVATION_NM
							            , RESERVATION_PHONE
							            , RESERVATION_EMAIL
							            , RESERVATION_ETC
							            , RESERVATION_TYPE
							            , RESERVATION_STATUS
							            , RESERVATION_PW
							            , REG_IP
							            , REG_ID
							            , REG_DT
						            )
        VALUES (
		              #{userId}
		            , #{classDetailId}
		            , #{reservationDt}
		            , #{reservationCnt}
		            , #{reservationNm}
		            , #{reservationPhone}
		            , #{reservationEmail}
		            , #{reservationEtc}
		            , #{reservationType}
		            , #{reservationStatus}
		            , #{reservationPw} <!-- 비회원 경우 예약 비밀번호 들어감 -->
		            , #{regIp}
		            , #{regId}
		            , NOW()
       			 )
    </insert>
    
   
    
	<!-- 예약 등록 전 정원 체크 -->
	<select id="getAvailableSeatsCk" parameterType="ReservationVO" resultType="ReservationVO">
		SELECT 
			    cd.CLASS_DETAIL_ID
			    ,c.CLASS_ID
			    ,r.RESERVATION_ID 
			    ,r.RESERVATION_DT
			    ,r.USER_ID 
			    ,r.RESERVATION_TYPE
			    ,CONCAT(DATE_FORMAT(cd.TIME_START, '%H:%i'), ' - ', DATE_FORMAT(cd.TIME_END, '%H:%i')) AS timeRange <!-- 시간대를 문자열로 표시-->
			    ,cd.TIME_START
			    , cd.TIME_END 
			    ,c.CLASS_MAX_CNT <!-- 각 시간대별 전체 수강 가능 인원--> 
			    ,IFNULL(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT 
	                    WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT 
	                    ELSE 0 END), 0) AS sumAllreservation <!-- 모든 예약 건(예약대기 + 접수완료)-->
			    ,(c.CLASS_MAX_CNT - IFNULL(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT 
		                                       WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT 
		                                       ELSE 0 END), 0)) AS availableSeatsWithAllReservations <!-- 모든 예약건(예약대기+접수완료) 제외 이용가능 좌석-->
			FROM 
			    tb_class_detail cd
			JOIN 
			    tb_class c ON cd.CLASS_ID = c.CLASS_ID  <!-- tb_class와 조인하여 CLASS_MAX_CNT 가져오기-->
			LEFT JOIN 
			    tb_reservation r ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID 
			    AND r.RESERVATION_DT = #{reservationDt} <!-- 예약 날짜-->
			where c.CLASS_ID = #{classId} <!-- 클래스ID -->
			 AND r.class_detail_Id = #{classDetailId} <!-- 클래스 상세 id-->
			GROUP BY 
			    cd.CLASS_DETAIL_ID, cd.TIME_START, cd.TIME_END, c.CLASS_MAX_CNT
	</select>
	
	
	<!--  예약 시 일별 특정 날짜에 클래스 시간대별 예약 가능 좌석 수 조회-->
	<select id="getAvailableTimeSlots" parameterType="map" resultType="EgovMap">
		SELECT 
		    cd.CLASS_DETAIL_ID
		    ,c.CLASS_ID
		    ,r.RESERVATION_ID 
		    ,r.RESERVATION_DT
		    ,CONCAT(DATE_FORMAT(cd.TIME_START, '%H:%i'), ' - ', DATE_FORMAT(cd.TIME_END, '%H:%i')) AS timeRange <!-- 시간대를 문자열로 표시-->
		    ,c.CLASS_MAX_CNT <!-- 전체 수강 가능 인원--> 
		    ,IFNULL(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT 
                    WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT 
                    ELSE 0 END), 0) AS sumAllreservation <!-- 모든 예약 건(예약대기 + 접수완료)-->
		    ,(c.CLASS_MAX_CNT - IFNULL(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT 
	                                       WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT 
	                                       ELSE 0 END), 0)) AS availableSeatsWithAllReservations <!-- 모든 예약건(예약대기+접수완료) 제외 이용가능 좌석-->
		   ,IFNULL((SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT ELSE 0 END)),0) as sumAprovedReservation <!-- 예약 승인 된 예약자 수 -->
		    ,(c.CLASS_MAX_CNT - IFNULL(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT ELSE 0 END), 0)) AS availableSeatsWithApprovedReservations <!--  확정된 예약만 포함한 예약 가능 좌석 (RESERVATION_STATUS = '예약승인' 인 경우만 포함) -->
		FROM 
		    tb_class_detail cd
		JOIN 
		    tb_class c ON cd.CLASS_ID = c.CLASS_ID  <!-- tb_class와 조인하여 CLASS_MAX_CNT 가져오기-->
		LEFT JOIN 
		    tb_reservation r ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID 
		    AND r.RESERVATION_DT = #{reservationDt} <!-- 예약 날짜-->
		where c.CLASS_ID = #{classId}
		GROUP BY 
		    cd.CLASS_DETAIL_ID, cd.TIME_START, cd.TIME_END, c.CLASS_MAX_CNT
		
	</select>
	
	
   <!-- 예약 시 월별 예약가능 날짜 여부 확인 -->
   <select id="getMonthlyAvailableTimeSlots" resultType="EgovMap" parameterType="map">
	   <![CDATA[
	         WITH RECURSIVE date_range AS (
			    SELECT #{startDate} AS RESERVATION_DT -- 월시작일자
				UNION ALL
				SELECT DATE_ADD(RESERVATION_DT, INTERVAL 1 DAY)
				FROM date_range
				WHERE RESERVATION_DT < #{endDate} -- 월종료일자
				)
			SELECT 
			    date_range.RESERVATION_DT,
			    c.CLASS_MAX_CNT * (SELECT COUNT(*) FROM tb_class_detail WHERE class_id = #{classId, jdbcType=INTEGER}) AS CLASS_MAX_CNT,
			    IFNULL(SUM(r.sumReservationCnt), 0) AS sumReservationCnt,
			    (c.CLASS_MAX_CNT * (SELECT COUNT(*) FROM tb_class_detail WHERE class_id = #{classId, jdbcType=INTEGER}) - IFNULL(SUM(r.sumReservationCnt), 0)) AS availableSeatsWithAllReservations,
			    IFNULL(SUM(r.sumApprovedReservationCnt), 0) AS sumApprovedReservationCnt,
			    (c.CLASS_MAX_CNT * (SELECT COUNT(*) FROM tb_class_detail WHERE class_id = #{classId, jdbcType=INTEGER}) - IFNULL(SUM(r.sumApprovedReservationCnt), 0)) AS availableSeatsWithApprovedReservations
			FROM 
			    date_range
			LEFT JOIN 
			    (SELECT
			        RESERVATION_DT,
			        SUM(CASE WHEN RESERVATION_STATUS IN ('approved', 'stay') THEN RESERVATION_CNT ELSE 0 END) AS sumReservationCnt,
			        SUM(CASE WHEN RESERVATION_STATUS = 'approved' THEN RESERVATION_CNT ELSE 0 END) AS sumApprovedReservationCnt
			     FROM
			        tb_reservation
			     WHERE
			        CLASS_DETAIL_ID IN (SELECT CLASS_DETAIL_ID FROM tb_class_detail WHERE CLASS_ID = #{classId, jdbcType=INTEGER}) -- 클래스 ID 
			     GROUP BY
			        RESERVATION_DT
			    ) r ON date_range.RESERVATION_DT = r.RESERVATION_DT
			LEFT JOIN 
			    tb_class c ON c.CLASS_ID = #{classId, jdbcType=INTEGER} -- 클래스 ID 
			GROUP BY 
			    date_range.RESERVATION_DT
			ORDER BY 
			    date_range.RESERVATION_DT;
			
	   ]]> 
   </select>
   
	<!-- 예약 등록 시 예약번호 업데이트 -->
    <!-- RESERVATION_NUM 업데이트 쿼리 추가 -->
    <update id="updateReservationNum" parameterType="ReservationVO">
        UPDATE TB_RESERVATION
        SET RESERVATION_NUM = CONCAT(#{reservationNum}, '-', #{reservationId})
        WHERE RESERVATION_ID = #{reservationId}
    </update>
    
    
    
	<!-- 마이페이지 회원 예약목록  -->
	<select id="getMyReservationList" resultType="EgovMap" parameterType="UserVO">
	    SELECT 
			      r.RESERVATION_ID
				, c.CLASS_ID -- 클래스 정보
				, r.CLASS_DETAIL_ID
				, r.USER_ID
				, r.RESERVATION_DT
				, r.RESERVATION_CNT
				, r.RESERVATION_NM
				, r.RESERVATION_PHONE
				, r.RESERVATION_EMAIL
				, r.RESERVATION_ETC
				, r.RESERVATION_TYPE
				, r.RESERVATION_STATUS
				, r.REG_IP
				, r.REG_ID
				, r.REG_DT
				, r.UPDT_ID
				, r.UPDT_IP
				, r.UPDT_DT
				, r.CONFM_ID
				, r.CONFM_IP
				, r.CONFM_DT
				, cd.TIME_START
				, cd.TIME_END
				, c.CLASS_NM
				, c.CLASS_MAX_CNT
				, c.CLASS_CATE_BIG
				, c.CLASS_CATE_SMALL
				, c.CLASS_DSCRPTN
				, c.LOCATION
				, c.CLASS_AGE_MIN
				, c.CLASS_PRICE
				, c.CLASS_POST
				, c.START_DT
				, c.END_DT
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c 
		 ON cd.CLASS_ID = c.CLASS_ID
		 WHERE r.USER_ID = #{userId}
		 ORDER BY r.RESERVATION_DT DESC
		 LIMIT  #{pageSize} <!-- pageSize는 한 페이지에 표시할 항목 수 -->
		 OFFSET #{offset} <!-- offset은 (page - 1) * pageSize로 설정해 페이지의 시작 위치를 지정 -->
	</select>
	
	<!-- 마이페이지 회원 1명당 전체 예약 건수 -->
	<select id="getReservationCount" resultType="int" parameterType="String">
	    SELECT COUNT(*)
	    FROM TB_RESERVATION
	    WHERE USER_ID = #{userId}
    </select>
	
	
	
	<!-- 비회원 예약 정보 검색 -->
	<select id="searchNonUserReservation" resultType="EgovMap" parameterType="reservationVO">
		SELECT 
		      r.RESERVATION_ID
			, c.CLASS_ID -- 클래스 정보
			, r.CLASS_DETAIL_ID
			, r.USER_ID
			, r.RESERVATION_DT
			, r.RESERVATION_CNT
			, r.RESERVATION_NM
			, r.RESERVATION_PHONE
			, r.RESERVATION_EMAIL
			, r.RESERVATION_ETC
			, r.RESERVATION_TYPE
			, r.RESERVATION_STATUS
			, r.RESERVATION_PW
			, r.REG_IP
			, r.REG_ID
			, r.REG_DT
			, r.UPDT_ID
			, r.UPDT_IP
			, r.UPDT_DT
			, r.CONFM_ID
			, r.CONFM_IP
			, r.CONFM_DT
			, cd.TIME_START
			, cd.TIME_END
			, c.CLASS_NM
			, c.CLASS_MAX_CNT
			, c.CLASS_CATE_BIG
			, c.CLASS_CATE_SMALL
			, c.CLASS_DSCRPTN
			, c.LOCATION
			, c.CLASS_AGE_MIN
			, c.CLASS_PRICE
			, c.CLASS_POST
			, c.START_DT
			, c.END_DT
	 FROM TB_RESERVATION r
	 LEFT JOIN TB_CLASS_DETAIL cd 
	 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
	 LEFT JOIN  TB_CLASS c 
	 ON cd.CLASS_ID = c.CLASS_ID
	 WHERE r.RESERVATION_NM = #{reservationNm}
	 and r.RESERVATION_TYPE ='nonUser'
	 and r.RESERVATION_PW =#{reservationPw}
	 and r.RESERVATION_PHONE = #{reservationPhone}
	 and r.RESERVATION_EMAIL = #{reservationEmail}
	 and r.RESERVATION_DT = #{reservationDt}
	 ORDER BY r.RESERVATION_DT;
	</select>
	
	<!-- 회원(비회원) 예약 상세보기 -->
	<select id="getReservationDetails" resultType="ReservationVO" parameterType="int">
		select r.RESERVATION_ID 
			  ,r.USER_ID 
			  ,r.CLASS_DETAIL_ID 
			  , r.RESERVATION_DT 
			  , r.RESERVATION_CNT 
			  , r.RESERVATION_NM 
			  , r.RESERVATION_PHONE 
			  , r.RESERVATION_EMAIL 
			  , r.RESERVATION_ETC 
			  , r.RESERVATION_TYPE 
			  , r.RESERVATION_STATUS 
			  , r.REG_DT 
			  , r.UPDT_DT 
			  , r.CONFM_DT 
			  , r.RESERVATION_NUM 
			  , cd.TIME_START 
			  , cd.TIME_END
			  ,  CONCAT(cd.TIME_START, '-', cd.TIME_END) as reservationTime
			  , c.CLASS_ID
			  , c.CLASS_NM
			  , c.LOCATION
			  , c.CLASS_PRICE
			  ,	c.CLASS_TIME_TAKEN
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c 
		 ON cd.CLASS_ID = c.CLASS_ID
		 WHERE r.RESERVATION_ID = #{reservationId}
	
	</select>	
	
	
	
	<!-- (달력 아래 ) 관리자 예약현황(통계) 각 클래스 시간대별 예약인원수 ,예약건수 -->
	<select id="getReservationDayStatistics" parameterType="map" resultType="EgovMap">
		SELECT 
		    c.CLASS_NM AS className,
		    c.CLASS_ID,
		    cd.CLASS_DETAIL_ID,
		    r.RESERVATION_DT,
		    CONCAT(DATE_FORMAT(cd.TIME_START, '%H:%i'), ' - ', DATE_FORMAT(cd.TIME_END, '%H:%i')) AS timeSlot,
		    DATE_FORMAT(cd.TIME_START, '%H:%i') as TIME_START,
		    DATE_FORMAT(cd.TIME_END, '%H:%i') as TIME_END,
		    c.CLASS_MAX_CNT,
		    <!-- 전체 예약 인원 수 합계 -->
			COALESCE(SUM(r.RESERVATION_CNT), 0) AS totalAllPeopleReserved, 
			<!-- 예약 상태가 'stay' 또는 'approved'인 경우에만 전체 예약 인원 수 합계-->
	        COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS IN ('stay', 'approved') THEN r.RESERVATION_CNT ELSE 0 END), 0) AS totalPeopleReserved,
		    <!--  상태별 예약 인원 수 계산-->
		    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS stayPeople,
		    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS approvedPeople,
		    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'reject' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS rejectPeople,
		    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'cancel' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS cancelPeople,
		    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'done' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS donePeople,
			<!--  전체 예약 건수 합계-->
		    COALESCE(COUNT(r.RESERVATION_ID), 0) AS totalAllReservations,  
		    <!-- 예약 상태가 'stay' 또는 'approved'인 경우에만 전체 예약 건수 합계-->
	        COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS IN ('stay', 'approved') THEN r.RESERVATION_ID ELSE NULL END), 0) AS totalReservations,
		    <!-- 예약 상태별 예약 건수 카운트 -->
		    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS = 'stay' THEN 1 END), 0) AS stayCount,
		    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN 1 END), 0) AS approvedCount,
		    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS = 'reject' THEN 1 END), 0) AS rejectCount,
		    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS = 'cancel' THEN 1 END), 0) AS cancelCount,
		    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS = 'done' THEN 1 END), 0) AS doneCount,
		    CASE 
		        WHEN h.HOLIDAY_DT IS NOT NULL THEN '휴무일'
		        ELSE '운영일'
		    END AS holidayStatus
		FROM 
		    tb_class c
		LEFT JOIN 
		    tb_class_detail cd ON c.CLASS_ID = cd.CLASS_ID
		LEFT JOIN 
		    tb_reservation r ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID 
		    AND r.RESERVATION_DT = #{reservationDt} <!-- 선택한 날짜 -->
		LEFT JOIN 
		    tb_holiday h ON c.CLASS_ID = h.CLASS_ID 
		    AND h.HOLIDAY_DT = #{reservationDt} <!-- 선택한 날짜가 휴무일인지 확인 -->
		WHERE  #{reservationDt} 
		between C.START_DT and C.END_DT <!-- 선택한 날짜가 수강기간 내에 있는 클래스만 조회 -->
		and c.CLASS_ID = #{classId} <!-- 1개의 클래스에 대해서만 검색할 수 있도록 추가 -->
		GROUP BY 
		    c.CLASS_NM, cd.TIME_START, cd.TIME_END, h.HOLIDAY_DT
		ORDER BY 
		    c.CLASS_NM, cd.TIME_START;
		
	</select>
	
	
	<!--(예약건수 클릭 - 모달) 관리자 예약현황(통계) 예약건수 클릭 시 상세 정보 리스트 -->
	<select id="getReservationStatusDetails" parameterType="map" resultType="EgovMap" >
		SELECT 
	        r.RESERVATION_ID
	        ,c.CLASS_ID
	        ,c.CLASS_NM 
	        ,r.CLASS_DETAIL_ID
	        ,CONCAT(DATE_FORMAT(cd.TIME_START, '%H:%i'), ' - ', DATE_FORMAT(cd.TIME_END, '%H:%i')) AS timeSlot
		    ,DATE_FORMAT(cd.TIME_START, '%H:%i') as TIME_START
		    ,DATE_FORMAT(cd.TIME_END, '%H:%i') as TIME_END
	        ,r.RESERVATION_CNT
	        ,r.RESERVATION_DT
	        ,r.RESERVATION_NM 
	        ,r.RESERVATION_PHONE 
	        ,r.RESERVATION_EMAIL 
	        ,r.RESERVATION_ETC 
	        ,r.RESERVATION_TYPE 
	        ,r.RESERVATION_STATUS 
	        ,c.START_DT
	    	,c.END_DT
	    FROM tb_reservation r
	    left join tb_class_detail cd on r.CLASS_DETAIL_ID  = cd.CLASS_DETAIL_ID 
	    left join tb_class c on c.CLASS_ID  = cd.CLASS_ID 
	    WHERE r.CLASS_DETAIL_ID = #{classDetailId}
	      AND cd.CLASS_ID =  #{classId}
	      AND r.RESERVATION_DT =  #{reservationDt}
	</select>
	
	<!-- (달력 옆) 관리자페이지 예약현황 선택날짜 통합 정보 조회  -->
	<select id="getReservationTotalDayStatistics" parameterType="String" resultType="EgovMap">
	
	SELECT
	    c.CLASS_ID,
	    c.CLASS_NM,
	    c.START_DT,
	    c.END_DT,
	    c.CLASS_CATE_BIG,
	    c.CLASS_CATE_SMALL,
	    <!-- 예약 상태별 인원 수  -->
	    COALESCE(SUM(r.RESERVATION_CNT), 0) AS totalAllPeopleReserved,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS IN ('stay', 'approved') THEN r.RESERVATION_CNT ELSE 0 END), 0) AS totalPeopleReserved,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'stay' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS stayPeople,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'approved' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS approvedPeople,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'reject' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS rejectPeople,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'cancel' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS cancelPeople,
	    COALESCE(SUM(CASE WHEN r.RESERVATION_STATUS = 'done' THEN r.RESERVATION_CNT ELSE 0 END), 0) AS donePeople,
	    <!-- 예약 건수 -->
	    COALESCE(COUNT(r.RESERVATION_ID), 0) AS totalAllReservations,
	    COALESCE(COUNT(CASE WHEN r.RESERVATION_STATUS IN ('stay', 'approved') THEN r.RESERVATION_ID ELSE NULL END), 0) AS totalReservations
	FROM
	    tb_class c
	LEFT JOIN
	    tb_class_detail cd ON c.CLASS_ID = cd.CLASS_ID
	LEFT JOIN
	    tb_reservation r ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
	    AND r.RESERVATION_DT = #{reservationDt} <!--선택한 날짜 -->
	WHERE
	    <!-- 1. 선택한 날짜가 클래스의 시작일과 종료일 사이에 포함되는 클래스만 조회 -->
	    #{reservationDt}  
	    BETWEEN c.START_DT AND c.END_DT
	    <!-- 2. 예약이 없을 경우에도 해당 클래스를 포함 (예약이 없으면 NULL로 표시)  -->
	    <!-- OR r.RESERVATION_DT IS NULL-->
	GROUP BY
	    c.CLASS_ID,
	    c.CLASS_NM
	ORDER BY
	    c.CLASS_NM;
	</select>
	
	
	
    <!-- 관리자 예약 전체 목록 조회 -->
	<select id="getAdminReservationList" resultType="EgovMap">
	    SELECT 
			      r.RESERVATION_ID
				, c.CLASS_ID
				, r.CLASS_DETAIL_ID
				, r.USER_ID
				, r.RESERVATION_DT
				, r.RESERVATION_CNT
				, r.RESERVATION_NM
				, r.RESERVATION_PHONE
				, r.RESERVATION_EMAIL
				, r.RESERVATION_ETC
				, r.RESERVATION_TYPE
				, r.RESERVATION_STATUS
				, r.REG_IP
				, r.REG_ID
				, r.REG_DT
				, r.UPDT_ID
				, r.UPDT_IP
				, r.UPDT_DT
				, r.CONFM_ID
				, r.CONFM_IP
				, r.CONFM_DT
				, cd.TIME_START
				, cd.TIME_END
				, c.CLASS_NM
				, c.CLASS_MAX_CNT
				, c.CLASS_CATE_BIG
				, c.CLASS_CATE_SMALL
				, c.CLASS_DSCRPTN
				, c.LOCATION
				, c.CLASS_AGE_MIN
				, c.CLASS_PRICE
				, c.CLASS_POST
				, c.START_DT
				, c.END_DT
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c 
		 ON cd.CLASS_ID = c.CLASS_ID
		 ORDER BY REG_DT DESC
	</select>
	
	
	
	<!-- 관리자페이지  - 예약 필터링 목록 조회 -->
	<select id="getAdminReservationFilteringList" parameterType="map"  resultType="EgovMap">
	   SELECT 
			      r.RESERVATION_ID
				, c.CLASS_ID
				, r.CLASS_DETAIL_ID
				, r.USER_ID
				, r.RESERVATION_DT
				, r.RESERVATION_CNT
				, r.RESERVATION_NM
				, r.RESERVATION_PHONE
				, r.RESERVATION_EMAIL
				, r.RESERVATION_ETC
				, r.RESERVATION_TYPE
				, r.RESERVATION_STATUS
				, r.REG_IP
				, r.REG_ID
				, r.REG_DT
				, r.UPDT_ID
				, r.UPDT_IP
				, r.UPDT_DT
				, r.CONFM_ID
				, r.CONFM_IP
				, r.CONFM_DT
				, cd.TIME_START
				, cd.TIME_END
				, c.CLASS_NM
				, c.CLASS_MAX_CNT
				, c.CLASS_CATE_BIG
				, c.CLASS_CATE_SMALL
				, c.CLASS_DSCRPTN
				, c.LOCATION
				, c.CLASS_AGE_MIN
				, c.CLASS_PRICE
				, c.CLASS_POST
				, c.START_DT
				, c.END_DT
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c 
		 ON cd.CLASS_ID = c.CLASS_ID
		 WHERE 1=1
	     <if test="startDate != null and startDate != ''">
	         AND r.RESERVATION_DT &gt;= #{startDate}
	     </if>
	     <if test="endDate != null and endDate != ''">
	         AND r.RESERVATION_DT &lt;= #{endDate}
	     </if>
	     <if test="reservationType != null and reservationType != ''">
	         AND r.RESERVATION_TYPE = #{reservationType}
	     </if>
		 ORDER BY REG_DT DESC
   
	</select>
	
	<!-- 관리자 페이지 회원 상세보기 화면 조회 -->
	<select id="getReservationInfo" parameterType="String" resultType="ReservationVO">
    	SELECT 
			      r.RESERVATION_ID
				, c.CLASS_ID -- 클래스 정보
				, r.CLASS_DETAIL_ID
				, r.USER_ID
				, r.RESERVATION_DT
				, r.RESERVATION_CNT
				, r.RESERVATION_NM
				, r.RESERVATION_PHONE
				, r.RESERVATION_EMAIL
				, r.RESERVATION_ETC
				, r.RESERVATION_TYPE
				, r.RESERVATION_STATUS
				, r.REG_IP
				, r.REG_ID
				, r.REG_DT
				, r.UPDT_ID
				, r.UPDT_IP
				, r.UPDT_DT
				, r.CONFM_ID
				, r.CONFM_IP
				, r.CONFM_DT
				, DATE_FORMAT(cd.TIME_START, '%H:%i') as TIME_START 
				, DATE_FORMAT(cd.TIME_END, '%H:%i') as TIME_END 
				, c.CLASS_NM
				, c.CLASS_MAX_CNT
				, c.CLASS_CATE_BIG
				, c.CLASS_CATE_SMALL
				, c.CLASS_DSCRPTN
				, c.LOCATION
				, c.CLASS_AGE_MIN
				, c.CLASS_PRICE
				, c.CLASS_POST
				, c.START_DT
				, c.END_DT
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c ON cd.CLASS_ID = c.CLASS_ID
    	 WHERE r.RESERVATION_ID = #{reservationId}
	</select>
	
	
	<!-- 관리자 페이지 - 예약상태 변경 -->
	<update id="updateReservationStatus" parameterType="map">
	    UPDATE TB_RESERVATION
	       SET RESERVATION_STATUS = #{reservationStatus}
	     WHERE RESERVATION_ID = #{reservationId}
	</update>
	
	
	
	<!-- 관리자 페이지 - 예약승인(접수완료)  -->
	<update id="adminReservationApproved" parameterType="map">
	    UPDATE TB_RESERVATION
	    SET RESERVATION_STATUS = #{reservationStatus},
	    	CONFM_ID = #{confmId},
	    	CONFM_IP = #{confmIp},
	    	CONFM_DT = NOW()
	    WHERE RESERVATION_ID = #{reservationId}
	</update>
	
	<!-- 관리자 페이지 - 접수취소  -->
	<update id="adminReservationReject" parameterType="map">
	    UPDATE TB_RESERVATION
	    SET RESERVATION_STATUS = #{reservationStatus}
	    WHERE RESERVATION_ID = #{reservationId}
	</update>
	
	
	<!-- 사용자 페이지 - 예약취소  -->
	<update id="myReservationCancel" parameterType="map">
	    UPDATE TB_RESERVATION
	    SET RESERVATION_STATUS = #{reservationStatus}
	    WHERE RESERVATION_ID = #{reservationId}
	</update>
	
	<!-- 관리자 페이지 - 예약 정보 수정  -->
	<update id="updateReservationInfo" parameterType="reservationVO">
	    UPDATE TB_RESERVATION
	       SET 
	       		RESERVATION_DT = #{reservationDt}
 				, RESERVATION_CNT = #{reservationCnt}
	            , RESERVATION_NM =  #{reservationNm}
	            , RESERVATION_PHONE = #{reservationPhone}
	            , RESERVATION_EMAIL = #{reservationEmail} 
	            , RESERVATION_ETC = #{reservationEtc}
	            , RESERVATION_STATUS = #{reservationStatus}
	            , UPDT_IP = #{updtIp}
	            , UPDT_ID = #{updtId}
	            , UPDT_DT = NOW()
	     WHERE RESERVATION_ID = #{reservationId}
	</update>
	
	<!-- 관리자 페이지 - 예약 삭제 -->
	<delete id="deleteReservation" parameterType="int">
	    DELETE FROM TB_RESERVATION
	    WHERE RESERVATION_ID = #{reservationId}
	</delete>
	
	
	
	<!-- 관리자 페이지 - 예약 대기 승인 요청 알림 데이터 -->
	<select id="getAdminPendingReservationList" resultType="EgovMap">
	    SELECT 
			      r.RESERVATION_ID
				, c.CLASS_ID -- 클래스 정보
				, r.CLASS_DETAIL_ID
				, r.USER_ID
				, r.RESERVATION_DT
				, r.RESERVATION_CNT
				, r.RESERVATION_NM
				, r.RESERVATION_PHONE
				, r.RESERVATION_EMAIL
				, r.RESERVATION_ETC
				, r.RESERVATION_TYPE
				, r.RESERVATION_STATUS
				, r.REG_IP
				, r.REG_ID
				, r.REG_DT
				, r.UPDT_ID
				, r.UPDT_IP
				, r.UPDT_DT
				, r.CONFM_ID
				, r.CONFM_IP
				, r.CONFM_DT
				, cd.TIME_START
				, cd.TIME_END
				, c.CLASS_NM
				, c.CLASS_MAX_CNT
				, c.CLASS_CATE_BIG
				, c.CLASS_CATE_SMALL
				, c.CLASS_DSCRPTN
				, c.LOCATION
				, c.CLASS_AGE_MIN
				, c.CLASS_PRICE
				, c.CLASS_POST
				, c.START_DT
				, c.END_DT
		 FROM TB_RESERVATION r
		 LEFT JOIN TB_CLASS_DETAIL cd 
		 ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		 LEFT JOIN  TB_CLASS c ON cd.CLASS_ID = c.CLASS_ID
		 WHERE r.RESERVATION_STATUS = 'stay'
	</select>
	
	
</mapper>
	
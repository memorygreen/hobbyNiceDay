<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ClassDAO"><!-- egovframework.com.classes.service.impl.ClassDAO -->
	
	
 
	<!-- 클래스 등록 -->
	<insert id="insertClass" parameterType="egovframework.com.cmm.ClassVO" useGeneratedKeys="true" keyProperty="classId">
    INSERT INTO TB_CLASS (
					          CLASS_NM
					        , CLASS_DSCRPTN
					        , LOCATION
					        , CLASS_CATE_BIG
					        , CLASS_CATE_SMALL
					        , CLASS_AGE_MIN
					        , CLASS_PRICE
					        , CLASS_MAX_CNT
					        , START_DT
					        , END_DT
					        , REG_IP
					        , REG_ID
					        , REG_DT
					        , UPDT_DT
					        , UPDT_IP
					        , CLASS_POST
					        , IMG_ID
					        , CLASS_TIME_TAKEN
					     )
	    VALUES (
			          #{classNm}
			        , #{classDscrptn}
			        , #{location}
			        , #{classCateBig}
			        , #{classCateSmall}
			        , #{classAgeMin}
			        , #{classPrice}
			        , #{classMaxCnt}
			        , #{startDt}
			        , #{endDt}
			        , #{regIp}
			        , #{regId}
			        , NOW()
			        , #{updtDt}
			        , #{updtIp}
			        , #{classPost}
			        , #{imgId}
			        , #{classTimeTaken}
			    )
	</insert>



	<!-- (임시 ) 휴무일 등록 -->
	<insert id="insertHoliday" parameterType="HolidayVO" useGeneratedKeys="true" keyProperty="holidayId"> <!-- 생성된 PK를 반환 -->
	    INSERT INTO TB_HOLIDAY (
					 	    	  HOLIDAY_DT
						      	, HOLIDAY_DESC
						    	, CLASS_ID
					        	, IS_PUBLIC_HOLIDAY
					        	, REG_IP
					        	, REG_ID
					        	, REG_DT
						     	 )
					    VALUES (
							       #{holidayDt}
							      ,#{holidayDesc}
							      ,#{classId}
							      ,#{isPublicHoliday}
							      ,#{regIp}
							      ,#{regId}
       						      , NOW()
				     			 )
	</insert>
	
	
	<!-- 클래스 생성 시 시간 추가  -->
	<insert id="insertClassDetail" parameterType="ClassVO" useGeneratedKeys="true" keyProperty="classDetailId"> <!-- 생성된 PK를 반환 -->
	    INSERT INTO TB_CLASS_DETAIL (
					 	    	  CLASS_ID
						      	<!-- , MAX_PARTICIPANTS TB_CLASS 에 이미 있음  -->
						    	, AVAILABLE_CURRENT_CNT 
					        	, AVAILABLE_SEATS <!-- 남은좌석수 -->
					        	, AVAILABLE_STATUS
					        	, TIME_START
					        	, TIME_END
					        	, REG_IP
					        	, REG_ID
					        	, REG_DT
						     	 )
					    VALUES (
							       #{classId}
							      <!-- ,#{maxParticipants} -->
							      , 0 <!-- 현재 예약된 인원수 -->
							      ,#{availableSeats} <!-- 남은좌석수 -->
							      ,#{availableStatus}<!-- 예약가능 상태  -->
							      ,#{timeStart}
							      ,#{timeEnd}
							      ,#{classDetailRegIp}
							      ,#{classDetailRegId} <!-- 세션에 담긴 ID 값 -->
							      , NOW()
				     			 )
	</insert>
	
	
	<!-- 관리자 클래스 전체 목록 조회 -->
	<select id="getAdminClassList" resultType="EgovMap">
	    SELECT *
	    FROM TB_CLASS
	    ORDER BY REG_DT DESC
	</select>
	
	
	<!-- 메인화면 클래스 전체 목록 조회 (최신 등록 6개) -->
	<select id="getMainClassList" resultType="EgovMap">
	    
	    SELECT c.*
			  ,i.IMG_NM 
			  ,i.IMG_REP 
			  ,i.IMG_TYPE 
			  ,i.IMG_URL
		FROM  TB_CLASS c
		LEFT JOIN tb_img i
		ON c.img_id = i.img_id
		WHERE c.END_DT >= now()
		AND c.CLASS_POST = 'Y'
		ORDER BY REG_DT DESC
		limit 6

	</select>
	
	
	<!-- 카테고리를 통해 구하기 -->
	<!-- (최종)클래스 리스트 - 카테고리별 , 페이징 포함   -->
	<select id="getClassListByCategory" resultType="EgovMap" parameterType="map">
	    SELECT 
	        c.*, 
	        i.IMG_NM 
	    FROM TB_CLASS c
	    LEFT JOIN TB_IMG i ON c.img_id = i.img_id
	    WHERE c.CLASS_POST = 'Y'
        <!-- 카테고리가 있을 경우 조건 추가 -->
	    <if test="category != null and category != ''">
	        AND c.CLASS_CATE_BIG = #{category}
	    </if>
	    <!-- 검색어가 있을 경우 조건 추가 -->
	    <if test="searchInput != null and searchInput != ''">
	        AND c.CLASS_NM LIKE CONCAT('%', #{searchInput}, '%')
	    </if>
	    
	    <!-- 정렬 조건 추가 -->
	    <choose>
	    	<when test="sort == 'regDtDesc'"> <!-- 최신순 -->
	            ORDER BY c.REG_DT DESC ,c.END_DT ASC, c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </when>
	        <when test="sort == 'closeSoon'"> <!-- 마감 임박순 -->
	            ORDER BY c.END_DT ASC, c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </when>
	        <when test="sort == 'recruiting'"> <!-- 모집중 and 조건으로  c.End_DT 가 오늘 이후 -->
	            AND c.END_DT &gt;= now()
	            ORDER BY c.END_DT ASC, c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </when>
	        <when test="sort == 'closed'"> <!-- 모집완료 and 조건으로 c.End_DT 가 오늘 이전 -->
	            AND c.END_DT &lt; now()
	            ORDER BY c.END_DT ASC, c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </when>
	        <when test="sort == 'lowPrice'"> <!-- 저가격순 -->
	            ORDER BY c.CLASS_PRICE ASC, c.CLASS_NM ASC
	        </when>
	        
	        <when test="sort == 'nameAsc'"> <!-- 클래스명 오름차순 (동일하면 저가격순) -->
	            ORDER BY c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </when>
	        
	        <otherwise> <!-- 기본정렬 최신순 마감임박, 클래스명 오름차순, 가격낮은순 -->
	            ORDER BY  c.REG_DT DESC ,c.END_DT ASC,  c.CLASS_NM ASC, c.CLASS_PRICE ASC
	        </otherwise>
	    </choose>
	    LIMIT #{offset}, #{pageSize}
	</select>
	
	<!-- (최종)클래스 리스트 개수 - 카테고리별 클래스 개수 구하기 카테고리별 , 페이징 포함   -->
	<select id="getClassCountByCategory" resultType="int" parameterType="map">
		SELECT count(*) 
		FROM  TB_CLASS c
		LEFT JOIN tb_img i
			ON c.img_id = i.img_id
		where c.CLASS_POST = 'Y'
		  <!-- 카테고리가 있을 경우 조건 추가 -->
			 <if test="category != null and category != ''">
		        AND c.CLASS_CATE_BIG = #{category}
		    </if>
		  <!-- 검색어가 있을 경우 조건 추가 -->
		    <if test="searchInput != null and searchInput != ''">
		        AND c.CLASS_NM LIKE CONCAT('%', #{searchInput}, '%')
		    </if>
	    <!-- 모집 중/모집 완료 조건 추가 -->
	    <choose>
	        <when test="sort == 'recruiting'"> <!-- 모집중일 경우 개수 -->
	            AND c.END_DT &gt;= NOW()
	        </when>
	        <when test="sort == 'closed'"> <!-- 모집완료일 경우 개수 -->
	            AND c.END_DT &lt; NOW()
	        </when>
	    </choose>
	</select>
	
	
	
	
	<!-- 클래스 상세보기 화면 조회 -->
	<select id="getClassDetails" parameterType="ImgVO" resultType="ClassVO">
    	<!-- SELECT * 
    	FROM TB_CLASS 
    	WHERE CLASS_ID = #{classId} -->
    	
    	SELECT 
		    c.CLASS_ID,
		    c.CLASS_NM,
		    c.CLASS_DSCRPTN,
		    c.LOCATION,
		    c.CLASS_CATE_BIG,
		    c.CLASS_CATE_SMALL,
		    c.CLASS_AGE_MIN,
		    c.CLASS_PRICE,
		    c.CLASS_MAX_CNT,
		    c.CLASS_POST,
		    c.CLASS_TIME_TAKEN,
   		    i.img_id,
		    i.img_nm,
	        DATE_FORMAT(c.START_DT, '%Y-%m-%d') as START_DT,
    		DATE_FORMAT(c.END_DT , '%Y-%m-%d') as END_DT,
		    c.REG_DT AS CLASS_REG_DT,
		    c.UPDT_DT AS CLASS_UPDT_DT,
		    GROUP_CONCAT(DISTINCT CONCAT(hd.HOLIDAY_DT, '(', hd.HOLIDAY_DESC, ')') ORDER BY hd.HOLIDAY_DT SEPARATOR ', ') AS HOLIDAY_INFO,
		    <!--GROUP_CONCAT(DISTINCT CONCAT(DATE_FORMAT(cd.TIME_START, '%H:%i'), '-', DATE_FORMAT(cd.TIME_END, '%H:%i')) ORDER BY cd.TIME_START SEPARATOR ', ') AS TIME_SETS  -->
	        GROUP_CONCAT(DISTINCT CONCAT(cd.class_detail_id, '; ', DATE_FORMAT(cd.TIME_START, '%H:%i'), '-', DATE_FORMAT(cd.TIME_END, '%H:%i')) ORDER BY cd.TIME_START SEPARATOR ', ') AS TIME_SETS
		FROM 
		    TB_CLASS c
		LEFT JOIN 
		    TB_HOLIDAY hd 
		    ON c.CLASS_ID = hd.CLASS_ID
		LEFT JOIN 
		    TB_CLASS_DETAIL cd
		    ON c.CLASS_ID = cd.CLASS_ID
		LEFT JOIN 
		    TB_IMG i 
		    <!-- 
		     ON c.CLASS_ID = hd.CLASS_ID
		     -->
		     ON c.img_id = i.img_id <!-- ON c.CLASS_ID = hd.CLASS_ID-->
		WHERE
		    c.CLASS_ID = #{classId} <!-- 클래스아이디 -->
		GROUP BY c.CLASS_ID;
	</select>
	
	
	
	
	
	
	
	
	
	<!-- 관리자페이지 클래스 상세조회 - 해당 클래스 휴무일 목록 -->
	<select id="getHolidaysByClassId" parameterType="int" resultType="EgovMap">
		SELECT * 
		FROM tb_holiday 
		WHERE class_id = #{classId}
	</select>
	
	
	<!-- 관리자페이지 클래스 상세조회 - 해당 클래스 수강시간대 목록  -->
	<!-- 클래스 별 수강시간대 가져오는 쿼리 (시간대 가공)-->
	<select id="getTimeSetsByClassId" parameterType="int" resultType="EgovMap">
	SELECT 
		 CLASS_DETAIL_ID 
		,CLASS_ID
		,DATE_FORMAT(TIME_START, '%H:%i') as TIME_START 
		,DATE_FORMAT(TIME_END, '%H:%i') as TIME_END 
		,CONCAT(DATE_FORMAT(TIME_START, '%H:%i'), '-', DATE_FORMAT(TIME_END, '%H:%i')) AS TIME_SETS
	FROM tb_class_detail
	WHERE class_id = #{classId};
	</select>
	
	
	<!-- 관리자 페이지 클래스 수정 시 - 휴무일 지정하고자 하는 날 예약 있는 지확인 -->
	<select id="hasReservationsOnDate" parameterType="map" resultType="int">
		SELECT 
			count(*) 
		FROM tb_class_detail cd
		LEFT JOIN TB_RESERVATION r 
		ON cd.CLASS_DETAIL_ID = r.CLASS_DETAIL_ID
		WHERE cd.CLASS_ID = #{classId}
		AND r.RESERVATION_DT = #{holidayDt}
		AND r.RESERVATION_STATUS IN ('approved', 'stay');
	</select>
	
	<!-- 관리자 페이지 클래스 수정 시 - 휴무일 지정하고자 하는 날 휴무일 있는 지 확인 -->
	<select id="ckDuplicateHoliday" parameterType="map" resultType="int">
		SELECT COUNT(*)
	    FROM tb_holiday
	    WHERE class_id = #{classId}
	    AND holiday_dt = #{holidayDt};
	</select>
	
	<!-- 관리자페이지 - 클래스 수정 시 - 휴무일 새로 등록 -->
	<insert id="adminClassUpdateInsertHoliday" parameterType="HolidayVO">
	   INSERT INTO tb_holiday (class_id
	   							, holiday_dt
	   							, holiday_desc
	   							, REG_DT
	   							, REG_ID
	   							, REG_IP)
   	                  VALUES (#{classId}
   	                  		, #{holidayDt}
   	                  		, #{holidayDesc}
   	                  		, now()
   	                  		, #{regId}
   	                  		, #{regIp});
	</insert>
	
	
	<!-- 관리자 페이지 - 클래스 수정 - 휴무일 삭제  -->
	<delete id="adminClassUpdateDeleteHoliday" parameterType="int">
          DELETE FROM tb_holiday 
          WHERE holiday_id = #{holidayId}
    </delete>
    
    <!-- 관리자 페이지 - 클래스 수정  -->
    <update id="adminClassUpdate" parameterType="ClassVO">
	    UPDATE tb_class
	    SET 
	        class_nm = #{classNm},
	        class_dscrptn = #{classDscrptn},
	        location = #{location},
	        class_cate_big = #{classCateBig},
	        class_cate_small = #{classCateSmall},
	        class_age_min = #{classAgeMin},
	        class_price = #{classPrice},
	        class_post = #{classPost},
	        start_dt = #{startDt},
	        end_dt = #{endDt},
	        updt_id = #{updtId},
	        updt_ip = #{updtIp},
	        updt_dt = NOW()
	    WHERE class_id = #{classId}
	</update>
    
    
    
	<!-- 이미지 등록 1개 테스트 -->
	<insert id="saveItem" parameterType="ImgVO" useGeneratedKeys="true" keyProperty="imgId">
	
    INSERT INTO TB_IMG (
					        IMG_NM
					        ,IMG_URL
					        ,IMG_TYPE
					        ,IMG_REP
					        ,REG_IP
					        ,REG_ID
					        ,REG_DT
					     )
	    VALUES (
		          #{imgNm}
		         ,#{imgUrl}
		         ,#{imgType}
		         ,#{imgRep}
		         ,#{regIp}
		         ,#{regId}
			     , NOW()
			    )
	</insert>
	
	<!-- 이미지 조회 테스트 -->
	<select id="getImagesByClassId" parameterType="int" resultType="ImgVO">
	    SELECT * FROM TB_IMG 
	    WHERE IMG_ID = #{imgId}
	</select>
	
	
	
	<!-- 클래스 삭제 관련 -->
	
	<!-- 예약 삭제 쿼리 (class_detail_id를 참조하는) -->
	<delete id="deleteReservationByClassId" parameterType="int">
	    DELETE r
	    FROM tb_reservation r
	    INNER JOIN tb_class_detail cd ON r.class_detail_id = cd.class_detail_id
	    WHERE cd.class_id = #{classId}
	</delete>
	
	<!-- 클래스 세부 정보 삭제 -->
    <delete id="deleteClassDetailByClassId" parameterType="int">
        DELETE FROM tb_class_detail WHERE class_id = #{classId}
    </delete>


    <!-- 이미지 삭제 -->
    <delete id="deleteImageByClassId" parameterType="int">
	    DELETE tb_img 
	    FROM tb_img
	    INNER JOIN tb_class ON tb_img.img_id = tb_class.img_id
	    WHERE tb_class.class_id = #{classId}
	</delete>

    <!-- 휴일 정보 삭제 -->
    <delete id="deleteHolidayByClassId" parameterType="int">
        DELETE FROM tb_holiday WHERE class_id = #{classId}
    </delete>

    <!-- 클래스 삭제 -->
    <delete id="deleteClassById" parameterType="int">
        DELETE FROM tb_class WHERE class_id = #{classId}
    </delete>
    
    

    <!-- 클래스 삭제 관련 끝 -->
    
    <!-- 관련 데이터 한 번에 삭제 -->
    <delete id="deleteAllByClassId" parameterType="int">
		  DELETE FROM tb_reservation WHERE class_detail_id IN (SELECT class_detail_id FROM tb_class_detail WHERE class_id = #{classId});
		  DELETE FROM tb_class_detail WHERE class_id = #{classId};
		  DELETE FROM tb_img WHERE img_id IN (SELECT img_id FROM tb_class WHERE class_id = #{classId});
		  DELETE FROM tb_holiday WHERE class_id = #{classId};
		  DELETE FROM tb_class WHERE class_id = #{classId};
	</delete>
    
	
</mapper>